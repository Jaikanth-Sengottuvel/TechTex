Harish (Backend Developer) → Handles repo cloning, setup, backend setup (Express, Socket.IO, Firebase), and all backend-related features.

Jaikanth (You) → Will only work on additional AI features for the project (AI assistant, AI code suggestions, AI UI).

Gilbert → Engineering Lead (architecture, integration, CI/CD, code review).

Vignesh → Frontend UI (canvas tools, panels, styling, code editor UI).

Here’s the updated 21-day schedule with these changes applied:

Week 1 — Foundation, Dev Environment, Canvas UX (MVP)

Day 1 — Setup & Kickoff

Harish: Clone repo, run locally, setup ESLint + Prettier, configure Firebase project.

Gilbert: Setup GitHub Actions CI workflow, create branches (dev, feature/*).

Vignesh: Explore repo code structure, list needed UI changes.

Jaikanth: Review PRD & AI feature scope, draft AI prompt templates.

Day 2 — Code Audit + Structure

Harish: Introduce Zustand store, refactor state handling.

Gilbert: Set up TailwindCSS, theme config.

Vignesh: Create toolbar + left/right panel placeholders.

Jaikanth: Finalize AI feature flow diagrams (for Week 3 tasks).

Day 3 — Layers Panel

Harish: Implement layer data handling (JSON format, z-index management).

Gilbert: Oversee Konva layer integration logic.

Vignesh: Build layers panel UI & connect to state.

Jaikanth: Research Gemini/OpenAI API integration for AI helper.

Day 4 — Properties Panel

Harish: Create backend-ready shape schema.

Gilbert: Implement undo/redo logic in Zustand.

Vignesh: Style & implement properties panel UI.

Jaikanth: Draft AI prompts for code improvement suggestions.

Day 5 — Component Library

Harish: Implement component JSON storage logic (localStorage initially).

Gilbert: Enable drag/drop component placement.

Vignesh: Design library UI.

Jaikanth: Identify AI output formats for Tailwind/CSS code generation.

Day 6 — Export & Prototyping

Harish: Add .toDataURL() and .toJSON() export endpoints.

Gilbert: Implement frame linking logic.

Vignesh: Create export modal UI.

Jaikanth: Prepare AI code beautification examples.

Day 7 — Internal Demo

All: Review features, fix bugs.

Gilbert: Merge stable features into dev.

Week 2 — Persistence, Code View, Design-to-Code Skeleton

Day 8 — Backend Scaffold

Harish: Create Express + Socket.IO backend, add health check route.

Gilbert: Oversee backend structure, ensure scalability.

Vignesh: Connect frontend to Socket.IO backend.

Jaikanth: Plan AI API backend endpoint for Week 3.

Day 9 — Firebase Integration

Harish: Integrate Firestore (projects, users) & Auth.

Gilbert: Implement auth state handling on frontend.

Vignesh: Style login/signup forms.

Jaikanth: Work on AI prompt library JSON structure.

Day 10 — Save/Load Projects

Harish: Backend endpoints for save/load with Firestore.

Gilbert: Integrate with frontend modals.

Vignesh: Implement save/load UI indicators.

Jaikanth: Test AI sample prompts with mock design data.

Day 11 — Code View Integration

Harish: Backend endpoint for returning generated code.

Gilbert: Integrate Monaco Editor into frontend.

Vignesh: Style code view panel.

Jaikanth: Research AI refactoring prompt optimization.

Day 12 — Design-to-Code Prototype

Harish: JSON → JSX/Tailwind mapping logic (EJS templates).

Gilbert: Tailwind mapping integration.

Vignesh: Download code UI.

Jaikanth: Draft AI improvement pipeline for generated code.

Day 13 — Export Code Improvements

Harish: Backend format toggle for Tailwind vs CSS Modules.

Gilbert: Frontend settings toggle logic.

Vignesh: Style export settings modal.

Jaikanth: Train AI prompts on both CSS & Tailwind outputs.

Day 14 — QA & Test Generation

All: Test generator, fix mapping issues.

Gilbert: Merge stable generator code.

Week 3 — Realtime Collaboration, AI, Voice Comments, Deploy

Day 15 — Realtime Sync Backend

Harish: Implement room-based Socket.IO events.

Gilbert: Event schema design.

Vignesh: Remote cursor UI.

Jaikanth: Prepare AI endpoint to integrate with design data.

Day 16 — Client-Side Sync

Harish: Apply socket events to Firestore updates.

Gilbert: Add throttling logic.

Vignesh: Sync visual updates.

Jaikanth: Start AI CSS/Tailwind suggestion feature.

Day 17 — Conflict Handling

Harish: Last-write-wins backend logic.

Gilbert: Version tracking system.

Vignesh: UI for conflict warnings.

Jaikanth: Integrate AI-assisted conflict resolution (optional).

Day 18 — AI Agent MVP

Harish: Backend proxy to Gemini/OpenAI API.

Gilbert: AI API request optimization.

Vignesh: Sidebar UI for AI suggestions.

Jaikanth: Implement AI code suggestion, test accuracy.

Day 19 — Voice Comments MVP

Harish: Store voice comment transcriptions in Firestore.

Gilbert: Audio recording integration.

Vignesh: Comment UI.

Jaikanth: Optional AI sentiment/summary for voice comments.

Day 20 — Performance Tuning

Harish: Optimize backend socket emissions.

Gilbert: Apply Konva layer caching.

Vignesh: UI rendering optimization.

Jaikanth: Test AI on large projects for performance.

Day 21 — Deploy & Demo

Harish: Deploy backend to Render.

Gilbert: Final integration testing.

Vignesh: Deploy frontend to Vercel.

Jaikanth: Prepare final demo video with AI features.